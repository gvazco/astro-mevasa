---
import ContactForm7 from "./ContactForm7.tsx";
import { BudgetButton } from "./BudgetButton.tsx";
import { ProductGallery } from "./ProductGallery.tsx";
import BlockRendererInner from "./BlockRenderer.astro";
import Navigation from "./Navigation.astro";
import Button from "./Button.astro";
import Heading from "./Heading.astro";
import Cover from "./Cover.astro";
import ArrowsDownIcon from "./ArrowsDownIcon.astro";
import TickItem from "./TickItem.astro";
import InfoIcon from "./InfoIcon.astro";
import TagsIcon from "./TagsIcon.astro";
import VRulerIcon from "./VRulerIcon.astro";
import HRulerIcon from "./HRulerIcon.astro";
import CRulerIcon from "./CRulerIcon.astro";
import TruckIcon from "./TruckIcon.astro";
import ShieldIcon from "./ShieldIcon.astro";
import WeightIcon from "./WeightIcon.astro";
import WhatsappIcon from "./WhatsappIcon.astro";
import WhatsappButton from "./WhatsappButton.astro";
import PhoneButton from "./PhoneButton.astro";
import SocialLink from "./SocialLink.astro";
import PostSearch from "./PostSearch.astro";
import CatalogSearch from "./CatalogSearch.astro";
import CategorySearch from "./CategorySearch.astro";
import DocumentationSearch from "./DocumentationSearch.astro";
import BriefcaseSearch from "./BriefcaseSearch.astro";
import CategoryCatalog from "./CategoryCatalog.astro";
import CategoryDocumentation from "./CategoryDocumentation.astro";
import CategoryBriefcase from "./CategoryBriefcase.astro";
import NavigationSubmenu from "./NavigationSubmenu.astro";
import NavigationLink from "./NavigationLink.astro";
import { getBlockStyling } from "@wp-block-tools/styles";
import type { Block } from "@wp-block-tools/styles";
import { Image } from "astro:assets";
import { joinClasses } from "../utils/joinClasses";

type Props = {
  postId: number;
  blocks: Block[];
};
const { blocks, postId } = Astro.props;

const replacements: { [key: string]: string } = {
  "Ã¡": "á",
  "Ã©": "é",
  Ã: "í",
  "Ã³": "ó",
  Ãº: "ú",
  "Ã±": "ñ",
  "Ã¼": "ü",
  // Añade más si encuentras otros caracteres
};

function fixAccents(text: string): string {
  return text.replace(
    /Ã¡|Ã©|Ã|Ã³|Ãº|Ã±|Ã¼/g,
    (match) => replacements[match] || match
  );
}
---

{
  blocks.map((block) => {
    const { styles, classes } = getBlockStyling(block);
    // console.log(block.name);
    switch (block.name) {
      case "contact-form-7/contact-form-selector":
        return (
          <ContactForm7
            client:only="react"
            formId={block.attributes?.id}
            formMarkup={block.attributes?.formMarkup}
          />
        );
      case "astroestates/post-search":
        return <PostSearch />;
      case "astroestates/category-search":
        return <CategorySearch />;
      case "astroestates/catalog-search":
        return <CatalogSearch />;
      case "astroestates/category-catalog":
        return <CategoryCatalog />;
      case "astroestates/documentation-search":
        return <DocumentationSearch />;
      case "astroestates/category-documentation":
        return <CategoryDocumentation />;
      case "astroestates/briefcase-search":
        return <BriefcaseSearch />;
      case "astroestates/category-briefcase":
        return <CategoryBriefcase />;
      case "astroestates/product-gallery":
        console.log(block);
        return (
          <ProductGallery
            client:only="react"
            productgallery={block.attributes?.productgallery}
            postId={postId}
          />
        );
      case "core/gallery":
        return (
          <div style={styles} class={joinClasses(classes, "galleryStyle")}>
            {(block.innerBlocks || []).map((innerBlock) => (
              <div>
                <BlockRendererInner blocks={[innerBlock]} postId={postId} />
              </div>
            ))}
          </div>
        );
      case "astroestates/tick-item":
        return (
          <TickItem>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </TickItem>
        );
      case "astroestates/info-icon":
        return (
          <InfoIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </InfoIcon>
        );
      case "astroestates/truck-icon":
        return (
          <TruckIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </TruckIcon>
        );
      case "astroestates/shield-icon":
        return (
          <ShieldIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </ShieldIcon>
        );
      case "astroestates/weight-icon":
        return (
          <WeightIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </WeightIcon>
        );
      case "astroestates/tags-icon":
        return (
          <TagsIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </TagsIcon>
        );
      case "astroestates/vruler-icon":
        return (
          <VRulerIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </VRulerIcon>
        );
      case "astroestates/hruler-icon":
        return (
          <HRulerIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </HRulerIcon>
        );
      case "astroestates/arrowsdown-icon":
        return (
          <ArrowsDownIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </ArrowsDownIcon>
        );
      case "astroestates/cruler-icon":
        return (
          <CRulerIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </CRulerIcon>
        );
      case "astroestates/whatsapp-icon":
        return (
          <WhatsappIcon>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </WhatsappIcon>
        );
      case "astroestates/whatsapp-button":
        return (
          <WhatsappButton
            slug={block.attributes?.slug}
            whatsapp={block.attributes?.whatsapp}
            postId={postId}
          />
        );
      case "astroestates/budget-button":
        return (
          <BudgetButton
            client:only="react"
            slug={block.attributes?.slug}
            titulo={block.attributes?.titulo}
            postId={postId}
          />
        );
      case "astroestates/phone-button":
        return <PhoneButton />;
      case "core/image":
        // console.log("IMAGE: ", block);
        return (
          <a href={block.attributes?.href} target="_blank">
            <Image
              src={block.attributes?.url}
              height={block.attributes?.height}
              width={block.attributes?.width}
              class={classes}
              style={styles}
              alt="core image"
            />
          </a>
        );
      case "core/button":
        // console.log("BUTTON: ", block);
        let label = block.attributes?.content || "";
        label = fixAccents(label);
        return (
          <Button
            classes={classes}
            styles={styles}
            url={block.attributes?.url}
            content={label}
          />
        );
      case "core/post-title":
      case "core/heading":
        return (
          <Heading
            transitionName={
              block.name === "core/post-title" ? `post-title-${postId}` : ""
            }
            level={block.attributes?.level || 2}
            classes={classes}
            styles={styles}
            content={block.attributes?.content || ""}
          />
        );
      case "core/cover":
        // console.log(block.attributes?.height);
        // console.log("BLOCK", block);
        return (
          <Cover
            classes={classes}
            styles={styles}
            url={block.attributes?.url}
            height={block.attributes?.height}
            width={block.attributes?.width}
            dimRatio={block.attributes?.dimRatio}
            overlayColor={block.attributes?.overlayColor}
            customOverlayColor={block.attributes?.customOverlayColor}
            minHeight={block.attributes?.minHeight}
            minHeightUnit={block.attributes?.minHeightUnit}
          >
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </Cover>
        );
      case "core/navigation-submenu":
        return (
          <NavigationSubmenu
            classes={classes}
            styles={styles}
            label={block.attributes?.label || ""}
            url={block.attributes?.url || ""}
          >
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </NavigationSubmenu>
        );
      case "core/navigation-link":
        return (
          <NavigationLink
            classes={classes}
            styles={styles}
            label={block.attributes?.label || ""}
            url={block.attributes?.url || ""}
          />
        );
      case "core/navigation":
        return (
          <Navigation classes={classes} styles={styles}>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </Navigation>
        );
      case "core/paragraph":
        return (
          <p
            class={classes}
            style={styles}
            set:html={block.attributes?.content}
          />
        );
      case "core/columns":
      case "core/column":
      case "core/post-content":
      case "core/group":
      case "core/buttons":
      case "core/social-links":
        return (
          <div class={classes} style={styles}>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </div>
        );
      case "core/separator":
        return <hr style="border: 1px solid gray;" />;
      case "core/list":
        return (
          <ul>
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </ul>
        );
      case "core/list-item":
        return (
          <li
            class={joinClasses(classes, "listStyle")}
            style={styles}
            set:html={block.attributes?.content}
          />
        );
      case "core/social-link":
        return (
          <SocialLink
            url={block.attributes?.url}
            service={block.attributes?.service}
            classes={classes}
            styles={styles}
          />
        );
      case "core/site-logo":
        // console.log(block.attributes);
        return (
          <div class={classes} style={styles}>
            <a href="/">
              <Image
                height={block.attributes?.width || "75"}
                width={block.attributes?.width || "250"}
                src={block.attributes?.url || ""}
                alt="Site logo"
                widths={[50, 75, 100, 250]}
              />
            </a>
          </div>
        );
      case "core/template-part":
        return (
          <BlockRendererInner
            blocks={block.innerBlocks || []}
            postId={postId}
          />
        );
      case "core/embed":
        // console.log("EMBED", block.attributes.url);
        return (
          <iframe
            width="100%"
            height="600"
            class={classes}
            style={styles}
            src={block.attributes?.url}
            title="YouTube video player"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowfullscreen
          />
        );
      case "cb/carousel":
        // console.log(block);
        return (
          <div class="slider-wrapper">
            <div class="slider-container">
              <BlockRendererInner
                blocks={block.innerBlocks || []}
                postId={postId}
              />
            </div>
          </div>
        );
      case "cb/slide":
        // console.log(block);
        return (
          <div class="slider-item">
            <BlockRendererInner
              blocks={block.innerBlocks || []}
              postId={postId}
            />
          </div>
        );
      default:
        return null;
    }
  })
}

<script type="module" src="/js/slider.js"></script>
